package com.biocharsproject.shared.modules\n\nimport android.os.Build\nimport android.os.Vibrator\nimport android.content.Context\nimport android.media.AudioAttributes\nimport android.media.MediaPlayer\nimport android.os.VibrationEffect\nimport kotlinx.coroutines.CoroutineScope\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.Job\n\n// Actual implementation for getCurrentTimeMillis\nactual fun getCurrentTimeMillis(): Long = System.currentTimeMillis()\n\n// Actual implementations for browser-specific types (stubs for Android)\nactual typealias ExternalAudioContext = Any\nactual typealias ExternalOscillatorNode = Any\nactual typealias ExternalGainNode = Any\nactual typealias ExternalAudioParam = Any\n\n// Actual for NavigatorWithVibrate - this will need a Context on Android.\n// We'll make it a class that can be instantiated in the Android-specific HeartBeatProcessor.\nactual interface NavigatorWithVibrate {\n    fun vibrate(pattern: Array<Int>): Boolean\n    fun vibrate(duration: Int): Boolean\n}\n\nclass AndroidVibrator(private val context: Context) : NavigatorWithVibrate {\n    private val vibrator = context.getSystemService(Context.VIBRATOR_SERVICE) as Vibrator?\n\n    override fun vibrate(pattern: Array<Int>): Boolean {\n        if (vibrator?.hasVibrator() == true) {\n            val longPattern = pattern.map { it.toLong() }.toLongArray()\n            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\n                vibrator.vibrate(VibrationEffect.createWaveform(longPattern, -1))\n            } else {\n                @Suppress(\"DEPRECATION\")\n                vibrator.vibrate(longPattern, -1)\n            }\n            return true\n        }\n        return false\n    }\n\n    override fun vibrate(duration: Int): Boolean {\n        if (vibrator?.hasVibrator() == true) {\n            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\n                vibrator.vibrate(VibrationEffect.createOneShot(duration.toLong(), VibrationEffect.DEFAULT_AMPLITUDE))\n            } else {\n                @Suppress(\"DEPRECATION\")\n                vibrator.vibrate(duration.toLong())\n            }\n            return true\n        }\n        return false\n    }\n}\n\n// Placeholder for an Android-specific audio player if needed by HeartBeatProcessor's actual implementation\n// This is a simplified example. Real audio playback for tones might use SoundPool or MediaPlayer directly.\nclass AndroidAudioPlayer(private val context: Context) {\n    private var mediaPlayer: MediaPlayer? = null\n\n    fun playSound(resourceId: Int, volume: Float) {\n        // MediaPlayer setup and playback\n        // This is a placeholder - actual implementation would be more robust\n        try {\n            mediaPlayer?.release()\n            mediaPlayer = MediaPlayer.create(context, resourceId)\n            mediaPlayer?.setVolume(volume, volume)\n            mediaPlayer?.setOnCompletionListener { it.release() }\n            mediaPlayer?.start()\n        } catch (e: Exception) {\n            println(\"AndroidAudioPlayer: Error playing sound: \${e.message}\")\n        }\n    }\n\n    fun stopSound() {\n        mediaPlayer?.release()\n        mediaPlayer = null\n    }\n} 